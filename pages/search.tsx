import React from "react";
import Head from "next/head";
import Header from "../components/Header";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";

import { useMediaQuery } from "react-responsive";

import useSearch from "../hooks/useSearch";

import type { Root as SearchResults } from "../hooks/result";

import styles from "../styles/SearchPage.module.css";
import { useRouter } from "next/router";

type Props = {
  data: SearchResults;
  term: string;
};

const Search: React.FC<Props> = ({ data, term }) => {
  const [isTabletTest, setisTabletTest] = React.useState(false);
  const isTablet = useMediaQuery({
    query: "(max-width: 50em)",
  });
  const router = useRouter();
  if (!term) {
    router.push("/");
  }
  React.useEffect(() => {
    setisTabletTest(isTablet);
  }, [isTablet]);
  return (
    <div>
      <Head>
        <title>{`${term} - Google`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/G_Logo.svg" />
      </Head>
      <Header term={term} isTablet={isTabletTest} />
      <div
        className={
          isTabletTest ? styles.mobileContainer : styles.desktopContainer
        }
      >
        <div className={styles.searchInformation}>
          {`About ${data.searchInformation.formattedTotalResults} results (${data.searchInformation.formattedSearchTime} seconds)`}
        </div>
        {data.items.map((result) => (
          <div key={result.link} className={styles.searchResult}>
            <a className={styles.url} href={result.link}>
              {result.formattedUrl}
            </a>
            <div className={styles.linkContainer}>
              <a className={styles.title} href={result.link}>
                <h3>{result.title}</h3>
              </a>
            </div>

            <p> {result.snippet}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export const getServerSideProps = async (context) => {
  const term = context.query.q;

  const start = context.query.start;
  // subscribe only to changes in the 'data' prop, which will be the
  // amount of todos because of the select function
  const data: SearchResults = await useSearch(term, start);

  if (!term) {
    return {
      redirect: {
        destination: "/",
        permanant: false,
      },
    };
  }
  return {
    props: { data, term },
  };
};

export default Search;
